services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks: 
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks: 
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks: 
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  # Kong migrations
  kong-migrations:
    image: kong:latest
    command: kong migrations bootstrap
    environment:
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
      KONG_DATABASE: postgres
    networks:
      - kong-net  
    depends_on:
      - kong-db
    restart: on-failure

  # Kong Migrations up (apply the latest migrations)
  kong-migrations-up:
    image: kong:latest
    command: kong migrations up && kong migrations finish
    environment:
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
      KONG_DATABASE: postgres
    networks:
      - kong-net
    depends_on:
      - kong-migrations
    restart: on-failure

  # Kong API Gateway
  kong:
    image: kong:latest
    user: kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
    networks:
      - kong-net
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    depends_on:
      - kong-migrations-up
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
    extra_hosts:
      - host.docker.internal:host-gateway

  # Postgres Database
  kong-db:
    image: postgres:9.5
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "kong",
          "-U",
          "kong"
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

  gateway:
    extends:
      file: ./gateway/docker-compose.yml
      service: gateway

  product:
    extends:
      file: ./services/product/docker-compose.yml
      service: product

  inventory:
    extends:
      file: ./services/inventory/docker-compose.yml
      service: inventory

networks: 
  broker-kafka:
    driver: bridge

  kong-net:
    external: false

  gateway-network:
    name: gateway-network
    driver:
      bridge

  product-network:
    name: product-network
    driver:
      bridge

  inventory-network:
    name: inventory-network
    driver:
      bridge

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
